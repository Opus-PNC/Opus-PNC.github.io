{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "properties": {
      "menuSetParams": {
        "type": "object",
        "$ref": "#/$defs/menuParmSet"
      },
      "menuTree": {
        "type": "object",
        "$ref": "#/$defs/menuItem",
        "title": "Main menu",
        "description": "The top level menu and (optionally) any submenus just below it"
      },
      "soloScreens": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/screen"
        },
        "title": "Special Solo Screens",
        "description": "List of special stand-alone screens.  These screens cannot be reached with the navigation keys and will only be shown when events trigger their display (so each should have an associated `showOnEvent` or it will never show).  The Esc key will exit these screens and return to the home menu.  \nExamples are a file transfer status screen and screens for temporary notices such as a boot screen. \nEach screen is an object, so it should be wrapped in curly braces {}. \nThe order of the solo screens doesn't matter since they are not navigable siblings.  They can only return to the home screen."
      }
  },
    "required": [
      "menuSetParams",
      "menuTree",
      "soloScreens"
    ],
    "$defs": {
      "menuItem": {
        "type": "object",
        "title": "Menu item",
        "description": "Menu tree branch or leaf.  Specify \"menuType\" first to determine what other properties are required.",
        "oneOf": [
          {
            "properties": {
              "menuType": {
                "title": "Menu type",
                "description": "The other settings depend on the \"menuType\" selected, so set \"menuType\" first.  A branch has submenus and a leaf has associated screens of data and/or text. \nThe data screens under a \"leaf_wrap\" will wrap around at the ends when navigating through the list.  The data screens under a \"leaf_no_wrap\" menu will not wrap around.",
                "const": "branch"
              },
              "menuTitle": {
                "type": "object",
                "$ref": "#/$defs/fixedText",
                "description": "Menu name to be shown on the LCD. \nDefault position is centered, but you can override that by using the position/justify property.  Row and column are ignored and are set by the firmware.  When it is shown as a submenu (on the bottom row) then it will be centered.  If left/right arrows are used to navigate submenus, keep the string length <= 18 to leave room for the arrows. \nRequires a text object, so it should be wrapped in curly braces {}.",
                "maxLength": 20
              },
              "menuId": {
                "type": "string",
                "title": "Unique id",
                "description": "Unique text id for reference locally and by host.  Alphanumeric with no spaces or special characters.",
                "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
                "minLength": 2,
                "maxLength": 12
              },
              "submenus": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/menuItem"
                },
                "description": "A list of submenus below this menu tree branch.  The submenus will be presented in the order they are in the file.  \nEach submenu is an object with multiple parameters, so it should be wrapped in curly braces {}."
              }
            },
            "required": [
              "menuType",
              "menuTitle",
              "menuId",
              "submenus"
            ],
            "additionalProperties": false
          },
          {
            "properties": {
              "menuType": {
                "title": "Menu type",
                "description": "The other settings depend on the \"menuType\" selected, so set \"menuType\" first.  A branch has submenus and a leaf has associated screens of data and/or text. \nThe data screens under a \"leaf_wrap\" will wrap around at the ends when navigating through the list.  The data screens under a \"leaf_no_wrap\" menu will not wrap around.",
                "enum": [ "leaf_wrap", "leaf_no_wrap" ]
              },
              "menuTitle": {
                "type": "object",
                "$ref": "#/$defs/fixedText",
                "description": "Menu name to be shown on the LCD. \nDefault position is centered, but you can override that by using the position/justify property. \nRequires a text object, so it should be wrapped in curly braces {}.",
                "maxLength": 20
              },
              "menuId": {
                "type": "string",
                "title": "Unique id",
                "description": "Unique text id for reference locally and by host.  Alphanumeric with no spaces or special characters.",
                "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
                "minLength": 2,
                "maxLength": 12
              },
              "screens": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/screen"
                },
                "description": "List of screens available under this menu tree leaf.  The screens will be presented in the order they are in the file. \nEach screen is an object, so it should be wrapped in curly braces {}."
              }
            },
            "required": [
              "menuType",
              "menuTitle",
              "menuId",
              "screens"
            ],
            "additionalProperties": false
          }
        ]
      },
      "screen": {
        "type": "object",
        "title": "LCD Screen definition",
        "description": "A screen is made up of text strings and variables.  It should contain one or the other or both.  An empty screen will be ignored.",
        "properties": {
          "screenId": {
            "type": "string",
            "title": "Unique id",
            "description": "Unique text id for reference locally and by host.  Alphanumeric with no spaces or special characters.",
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
            "minLength": 2,
            "maxLength": 12
          },
          "showOnEvent": {
            "enum": [
              "fileXfer",
              "benchCommErr",
              "hostCommErr",
              "leakTest",
              "benchFwUpdate",
              "menusLoaded"
            ],
            "description": "If specified, this screen will automatically be shown when the event occurs.  \nFor example, a screen to show the file transfer progress can automatically be shown when a file transfer starts. \nNote that each event can only trigger one (or no) event, so if you specify the same event for multiple screens, only the last one in the file will be activated."
          },
          "F1action": {
            "$ref": "#/$defs/actions"
          },
          "F2action": {
            "$ref": "#/$defs/actions"
          },
          "textBlocks": {
            "type": "array",
            "title": "Text Blocks",
            "description": "Array of zero or more fixed text objects (text and position) to place on the LCD.  \nEach text object should be wrapped in curly braces {}.",
            "items": {
              "$ref": "#/$defs/fixedText"
            },
            "examples": [
              [
                {
                  "text": "Default position"
                }
              ],
              [
                {
                  "text": "Left justified",
                  "position": {
                    "row": 0,
                    "column": 0,
                    "justify": "left"
                  }
                }
              ],
              [
                {
                  "text": "Centered text",
                  "position": {
                    "row": 0,
                    "column": 0,
                    "justify": "center"
                  }
                }
              ],
              [
                {
                  "text": "Right@12:",
                  "position": {
                    "row": 1,
                    "column": 12,
                    "justify": "right"
                  }
                }
              ]
            ]
          },
          "variables": {
            "type": "array",
            "title": "Variables",
            "description": "Array of zero or more variables to display on the screen. \nEach variable is an object, so it should be wrapped in curly braces {}.",
            "items": {
              "type": "object",
              "title": "Variable",
              "description": "Object specifies the variable, format and screen position",
              "properties": {
                "variable": {
                  "type": "object",
                  "title": "Variable Definition",
                  "description": "Variable specification.  The settings depend on the \"varType\" selected, so set \"varType\" first.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/variables/pnVal"
                    },
                    {
                      "$ref": "#/$defs/variables/dateVal"
                    },
                    {
                      "$ref": "#/$defs/variables/timeVal"
                    },
                    {
                      "$ref": "#/$defs/variables/tempVal"
                    },
                    {
                      "$ref": "#/$defs/variables/countVal"
                    },
                    {
                      "$ref": "#/$defs/variables/stringVar"
                    },
                    {
                      "$ref": "#/$defs/variables/percentVal"
                    },
                    {
                      "$ref": "#/$defs/variables/flowRates"
                    },
                    {
                      "$ref": "#/$defs/variables/pressures"
                    }
                  ]
                },
                "position": {
                  "type": "object",
                  "$ref": "#/$defs/position"
                }
              },
              "required": [
                "variable"
              ],
              "additionalProperties": false
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "screenId"
        ]
      },
      "fixedText": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "maxLength": 20
          },
          "position": {
            "type": "object",
            "$ref": "#/$defs/position"
          }
        },
        "additionalProperties": false,
        "examples": [
          {
            "text": "Default position"
          },
          {
            "text": "Left justified",
            "position": {
              "row": 0,
              "column": 0,
              "justify": "left"
            }
          },
          {
            "text": "Centered",
            "position": {
              "row": 0,
              "column": 0,
              "justify": "center"
            }
          },
          {
            "text": "Right@12:",
            "position": {
              "row": 1,
              "column": 12,
              "justify": "right"
            }
          }
        ]
      },
      "variables": {
        "pnVal": {
          "description": "PN is a special case, with units always shown, and no other text allowed on the same line to ensure that the value isn't modified.",
          "properties": {
            "varType": {
              "const": "pnVal",
              "description": "Particle Number"
            },
            "zeroStr": {
              "type": "string",
              "maxLength": 16,
              "title": "Zeroing text",
              "description": "Optional text to replace the English \"Zeroing\" to describe when the bench is in the zeroing state.  Used on PN screen as \"PN: <your text here>.  If not specified, the default English will be used."
            },
            "rinseStr": {
              "type": "string",
              "maxLength": 16,
              "title": "Rinsing text",
              "description": "Optional text to replace the English \"Rinsing\" to describe when the bench is in the rinsing state.  Used on PN screen as \"PN: <your text here>.  If not specified, the default English will be used."
            },
            "useThouSep": {
              "type": "boolean",
              "description": "If true, a thousands separator (comma, point or space) will be used between groups of 3 digits.  The separator used is set as a global setting \"thousandsChar\" in \"menuSetParams\""
            }
          },
          "required": [
            "varType",
            "useThouSep"
          ],
          "additionalProperties": false
        },
        "dateVal": {
          "properties": {
            "varType": {
              "const": "date",
              "description": "Date value"
            },
            "dateVal": {
              "enum": [
                "sysDate",
                "localDate",
                "calibDate",
                "lastLkTstDate",
                "lastLkTstPassDate",
                "nextLkTestDate"
              ],
              "description": "All dates are displayed in local time, except for the sysDate (UTC system date)"
            },
            "dateFmt": {
              "enum": [
                "yyyy.mm.dd"
              ]
            }
          },
          "required": [
            "varType",
            "dateVal"
          ],
          "additionalProperties": false
        },
        "timeVal": {
          "properties": {
            "varType": {
              "const": "time",
              "description": "Time value"
            },
            "timeVal": {
              "enum": [
                "sysTime",
                "localTime",
                "calibTime",
                "lastLkTstTime",
                "lastLkTstPassTime",
                "nextLkTestTime"
              ],
              "description": "All times are displayed in local time, except for the sysTime (UTC system time)"
            },
            "timeFmt": {
              "enum": [
                "hh:mm:ss",
                "hh:mm"
              ]
            }
          },
          "required": [
            "varType",
            "timeVal"
          ],
          "additionalProperties": false
        },
        "tempVal": {
          "properties": {
            "varType": {
              "const": "temperature",
              "description": "Temperature value"
            },
            "tempVal": {
              "enum": [
                "evapTemp",
                "ambientTemp",
                "cellTemp",
                "coronaChamberTemp"
              ]
            },
            "floatFmt": {
              "enum": [
                "999",
                "999.9"
              ]
            },
            "showUnits": {
              "type": "boolean"
            },
            "spaceBeforeUnits": {
              "type": "boolean",
              "description": "If true, a space will be inserted between the value and units"
            }
          },
          "required": [
            "varType",
            "tempVal",
            "floatFmt"
          ],
          "additionalProperties": false
        },
        "countVal": {
          "properties": {
            "varType": {
              "const": "count",
              "description": "Integer counter value"
            },
            "countVal": {
              "enum": [
                "bComErrors",
                "bComWarnings",
                "hComErrors",
                "hComWarnings",
                "benchMsgs",
                "hostMsgs",
                "localMsgs",
                "respMsecs",
                "respTimeouts"
              ]
            },
            "maxLength": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20
            },
            "showUnits": {
              "type": "boolean"
            },
            "spaceBeforeUnits": {
              "type": "boolean",
              "description": "If true, a space will be inserted between the value and units"
            }
          },
          "required": [
            "varType",
            "countVal"
          ],
          "additionalProperties": false
        },
        "stringVar": {
          "properties": {
            "varType": {
              "const": "string",
              "description": "String variables such as messages, file names, version info"
            },
            "stringVar": {
              "enum": [
                "bComErrorMsg",
                "bComWarningMsg",
                "hComErrorMsg",
                "hComWarningMsg",
                "xferFileName",
                "longRespCmd",
                "lastTimeoutCmd",
                "OpusFwVersion",
                "OpusShortSHA"
              ]
            },
            "maxLength": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20
            }
          },
          "required": [
            "varType",
            "stringVar"
          ],
          "additionalProperties": false
        },
        "percentVal": {
          "properties": {
            "varType": {
              "const": "percentVal",
              "description": "Percentage variable such as progress indicators"
            },
            "percentVal": {
              "enum": [
                "fileXferPct",
                "warmupPct",
                "lcdContrast",
                "relHumidity"
              ]
            },
            "showUnits": {
              "type": "boolean",
              "description": "If showUnits is true (the default), the percent symbol will be added, e.g.- 99%"
            },
            "floatFmt": {
              "enum": [
                "999",
                "999.9"
              ]
            }
          },
          "required": [
            "varType",
            "percentVal",
            "floatFmt"
          ],
          "additionalProperties": false
        },
        "flowRates": {
          "properties": {
            "varType": {
              "const": "flowRate",
              "description": "Gas flow rates in L/min or mL/min"
            },
            "flowVal": {
              "enum": [
                "freshAir",
                "sampleGas"
              ]
            },
            "showUnits": {
              "type": "boolean",
              "description": "The units (`L/min` or `mL/min` will be shown. \n\nIf you would like a different version (such as L/m) remember that you can use fixed text to add your own units and turn off the automatic units."
            },
            "flowUnits": {
              "enum": [
                "L/min",
                "mL/min"
              ],
              "description": "This will set the scaling, regardless of whether the units are actually shown or not. \n\nL/min will be shown as a fixed five digit float 9.999. \n\nmL/min will be shown as an integer with up to 4 digits."
            },
            "spaceBeforeUnits": {
              "type": "boolean",
              "description": "If true, a space will be inserted between the value and units"
            }
          },
          "required": [
            "varType",
            "flowVal"
          ],
          "additionalProperties": false
        },
        "pressures": {
          "properties": {
            "varType": {
              "const": "pressure",
              "description": "Pressures and vacuums in mbar.  Vacuums are only valid during a leak test."
            },
            "pressVal": {
              "enum": [
                "freshAirAbs",
                "sampleGasAbs",
                "freshAirAmb",
                "sampleGasAmb",
                "freshVacuum",
                "sampleVacuum"
              ]
            },
            "pressUnits": {
              "enum": [
                "none",
                "mb",
                "mbar",
                "hPa"
              ],
              "description": "The scaling will always be the same, but there are several equivalent units to choose from.  Or set units to `none` to not show any"
            },
            "spaceBeforeUnits": {
              "type": "boolean",
              "description": "If true, a space will be inserted between the value and units"
            }
          },
          "required": [
            "varType",
            "pressVal",
            "pressUnits"
          ]
        }
      },
      "position": {
        "type": "object",
        "title": "LCD position",
        "description": "Optional coordinates and justification to specify the position on the screen",
        "properties": {
          "row": {
            "type": "integer",
            "title": "LCD Row",
            "description": "Top row is 0.  Default of 0 will be used if not specified or if the row is fixed by the usage (e.g.- menu title moves from top to bottom row if a sub menu)",
            "minimum": 0,
            "maximum": 1,
            "default": 1
          },
          "column": {
            "type": "integer",
            "title": "LCD Column",
            "description": "Leftmost column is 0.  Default of 0 (or 19 for right justification) will be used if not specified or if the column is fixed by the usage.",
            "minimum": 0,
            "maximum": 19
          },
          "justify": {
            "title": "Text justification",
            "description": "How to position the text within the row or field.  Left or right justification is against the specified (or default) column.  Center justification centers on the whole row.",
            "enum": [
              "left",
              "right",
              "center"
            ]
          }
        },
        "additionalProperties": false
      },
      "actions": {
        "enum": [
          "startLeakTest",
          "stopLeakTest",
          "startPnMeas",
          "stopPnMeas",
          "darkenLCD",
          "lightenLCD"
        ]
      },
      "menuParmSet": {
        "type": "object",
        "required": [
          "menuSetName",
          "language",
          "useMenuArrows",
          "minFwVersion",
          "schemaVersion",
          "menuFileRev"
        ],
        "properties": {
          "menuSetName": {
            "type": "string",
            "description": "Name that will be reported to host to check which screen set is installed.    Alphanumeric with no spaces or special characters other than _ (underscore).",
            "pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
            "minLength": 4,
            "maxLength": 20
          },
          "language": {
            "enum": [
              "English",
              "German"
            ],
            "description": "Which language is used on the screens.  This is required to enable special handling for non-ASCII letters."
          },
          "useMenuArrows": {
            "type": "boolean",
            "title": "Use Menu Arrows?",
            "description": "If true, left and right arrows will be used to indicate when there are more submenu items that can be accessed through the left and right keys.",
            "default": true
          },
          "leftArrowCode": {
            "type": "integer",
            "description": "Character code for left arrow for menu navigation.  Suggestions: 127 for left arrow, 60 for ASCII '<'",
            "minimum": 0,
            "maximum": 255,
            "examples": [
              127,
              60
            ]
          },
          "rightArrowCode": {
            "type": "integer",
            "description": "Character code for right arrow for menu navigation.  Suggestions: 126 for right arrow, 62 for ASCII '>'",
            "minimum": 0,
            "maximum": 255,
            "examples": [
              126,
              62
            ]
          },
          "leftRightDataNav": {
            "type": "boolean",
            "title": "Allow left/right navigation of data screens",
            "description": "Normally, left/right buttons are used to move between sibling submenus (submenus on the same level below a common parent menu), and up/down buttons are used to scroll through a list of data screens under a leaf menu.  If this option is enabled, then the left/right keys will also work, with the same functionality as up/down, for the data screens."
          },
          "decimalChar": {
            "enum": [ ".", "," ],
            "title": "Decimal separator",
            "description": "Express 5/4 as 1.25 or 1,25"
          },
          "thousandsChar": {
            "enum": [ ",", ".", " "],
            "title": "Thousands separator",
            "description": "Express 1234 as 1,234 (US), 1.234 (Germany) or 1 234 (Sweden) for variables that have the option of showing a thousands separator."
          },
          "chirpMsecs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255,
            "title": "Chirp length",
            "description": "Sets the time duration of the chirp in milliseconds.  The chirp happens when a navigation key can't execute its function such as when trying to move beyond the beginning or end of a non-wrapping list, or pressing the Enter key on a screen that doesn't support it (e.g.- a data screen). \n\nThe default is 10 milliseconds.  Zero disables the chirp."
          },
          "minFwVersion": {
            "type": "string",
            "const": "0.1.17",
            "default": "0.1.17",
            "title": "Minimum Opus FW version",
            "description": "This version or later is required to be able to parse all the features of this JSON schema."
          },
          "schemaVersion": {
            "type": "integer",
            "const": 1,
            "default": 1,
            "title": "Menu file JSON schema version",
            "description": "This defines the JSON data structure that this file conforms to, set by the standard reference file referred to in \"$schema\""
          },
          "menuFileRev": {
            "type": "integer",
            "title": "Menu File Revision",
            "description": "Single integer revision number for this menu file.  You may use whatever numbering scheme you like.  The host may use this to determine if the installed file needs to be updated.",
            "minimum": 0,
            "maximum": 4294967295
          }
        },
        "additionalProperties": false
      }
    }
  }